#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define abu {ios_base::sync_with_stdio(false);}
#define ahmed {cin.tie(NULL);}
#define getunique(v) {sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end());}

typedef long long ll;
typedef long double lld;
typedef unsigned long long ull;

void usaco(string filename) {
    // #pragma message("be careful, freopen may be wrong")
    freopen((filename + ".in").c_str(), "r", stdin);
    freopen((filename + ".out").c_str(), "w", stdout);
}

// #include <atcoder/all>
// using namespace atcoder;

const lld pi = 3.14159265358979323846;
const ll INF = 1e18 ;
// const ll mod = 1000000007;
// const ll mod = 998244353;

ll n, m, k, q, l , w, r, x, y, z;
const ll template_array_size = 1e6 + 4265;
ll a[template_array_size];
ll b[template_array_size];
string s, t;
ll ans = 0;
char arr[4*300 + 1][4*300 + 1];
char color(int i , int j)
{
    int r = 0 , g =  0 , b = 0 ;
    for (int i1 = i; i1 < i+4 ; ++i1) {
        for (int k1 = j; k1 < j+4; ++k1) {
            if(arr[i1][k1]=='R'){r++;}
            else if(arr[i1][k1]=='G'){g++;}
            else{b++;}
        }
    }
    return (r>=(max(g,b)) ? 'R': (g>=(max(r,b))?'G':'B') );
}
void solve(int tc = 0) {
    cin>>n;
    for (int i = 0; i <(4*n) ; ++i) {
        for (int j = 0; j < (4*n); ++j) {
            cin>>arr[i][j];
        }
    }
    for (int i = 0; i < (4*n); i+=4) {
        for (int j = 0; j < (4*n); j+=4) {
            cout<< color( i , j)<<' ';
        }
        cout<<endl;
    }
}

int main() {
#ifdef abu_ahmed_clock
    auto begin = std::chrono::high_resolution_clock::now();
#endif
    abu ahmed
    // freopen("tc.cpp", "r", stdin);
    int tc = 1;
    //cin>>tc;
    for (int tu = 0; tu < tc; tu++) { solve(tu); }

#ifdef abu_ahmed_local
    auto end = std::chrono::high_resolution_clock::now();
		    cout << setprecision(4) << fixed;
            //cout << "Execution time: " << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << " seconds" << endl;
#endif
}